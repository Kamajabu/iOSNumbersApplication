//
//  MasterPresenterImplementation.swift
//  NumbersApplication
//
//  Created by Kamil Buczel on 21.01.2018.
//  Copyright (c) 2018 Kamajabu. All rights reserved.
//
//  This file was generated by the MVP Templates created by Kamil Buczel//

import Foundation

class MasterPresenterImplementation: MasterPresenter {
    unowned let view: MasterView
    let apiGateway: ApiGateway
    let deserializer: Deserializer

    var masterDataArray: [MasterData] = []
    var selectedIndexPath: IndexPath?

    required init(view: MasterView,
                  apiGateway: ApiGateway,
                  deserializer: Deserializer) {
        self.view = view
        self.apiGateway = apiGateway
        self.deserializer = deserializer
    }

    func viewDidLoad() {
        downloadData()
    }

    func retryFetch() {
        downloadData()
    }

    func selectCurrentlyViewedDetailOnList() {
        if let selectedRow = selectedIndexPath {
           view.selectMasterRow(selectedRow)
        }
    }

    func checkIfInitialItemNeedsToBeSet() {
        if(selectedIndexPath == nil && !masterDataArray.isEmpty) {
            let initialIndexPath = IndexPath(row: 0, section: 0)
            selectedIndexPath = initialIndexPath
            view.selectMasterRow(initialIndexPath)

        }
    }

    func downloadData() {
        apiGateway.fetchResources(urlString: MasterConsts.masterEndpoint) { (data, error) in
            guard error == nil else {
                let description = error?.localizedDescription
                self.view.displayErrorMessage(details: description ?? "-")
                return
            }

            if let recievedData = data {
                self.deserializeData(recievedData)
            }
        }
    }

    internal func deserializeData(_ recievedData: Data) {
        self.deserializer
            .decodeData(data: recievedData, dataType: [MasterData].self,
                        Completion: { (data) in
                            self.assignDataAndUpdateView(data)

            })
    }

    internal func assignDataAndUpdateView(_ data: [MasterData]) {
        self.masterDataArray = data
        DispatchQueue.main.async {
            self.view.reloadCollection()
        }
    }

    func configureCell(cell: MasterTableViewCell, row: Int) {
        let cellDetails = masterDataArray[row]
        cell.setTitleLabel(title: cellDetails.name)
        cell.setCellImage(cellImage: cellDetails.image)
    }

    func goToDetails(_ selectedIndex: IndexPath) {
        selectedIndexPath = selectedIndex
    }


    func prepareDestinationController(controller: DetailsViewController, selectedIndex: IndexPath) {
        selectedIndexPath = selectedIndex
        let chosenIndex = masterDataArray[selectedIndex.row].name
        let imageUrl = masterDataArray[selectedIndex.row].image

        controller.configurator = DetailsConfiguratorImplementation(
            masterIndex: chosenIndex, masterLowResImageUrl: imageUrl)

    }
}
