//
//  DetailsPresenterImplementation.swift
//  NumbersApplication
//
//  Created by Kamil Buczel on 21.01.2018.
//  Copyright (c) 2018 Kamajabu. All rights reserved.
//
//  This file was generated by the MVP Templates created by Kamil Buczel//

import Foundation

class DetailsPresenterImplementation: DetailsPresenter {
    unowned let view: DetailsView
    let apiGateway: ApiGateway
    let deserializer: Deserializer
    var masterIndex: String?
    var masterLowResImageUrl: String?

    required init(view: DetailsView,
                  apiGateway: ApiGateway,
                  deserializer: Deserializer,
                  masterIndex: String?,
                  masterLowResImageUrl: String?) {
        self.view = view
        self.apiGateway = apiGateway
        self.deserializer = deserializer
        self.masterIndex = masterIndex
        self.masterLowResImageUrl = masterLowResImageUrl
    }

    func viewDidLoad() {
        populateViewWithInitialData()
        attemptToFetchData()

    }

    func retryFetch() {
        attemptToFetchData()
    }

    internal func populateViewWithInitialData() {
        if let passedDetails = masterIndex {
            view.setNavigationBarTitle(title: passedDetails)
        } else {
            view.goBackToMasterPage()
        }

        if (masterLowResImageUrl != nil) {
            attemptURLConstruct()
        }
    }

    internal func attemptToFetchData() {
        if let passedIndex = masterIndex {
            downloadData(detailIndex: passedIndex)
        }
    }

    internal func attemptURLConstruct() {
        if let imageURL = URL(string: masterLowResImageUrl!) {
            view.setImageLowResPlaceholder(url: imageURL)
        }

    }

    internal func downloadData(detailIndex: String) {
        let interpolatedUrl = DetailsConsts.detailEndpoint + detailIndex

        apiGateway.fetchResources(urlString: interpolatedUrl) { (data, error) in
            guard error == nil else {
                let description = error?.localizedDescription
                self.view.displayErrorMessage(details: description ?? "-")
                return
            }

            if let recievedData = data {
                self.deserializeData(recievedData)
            }
        }
    }

    internal func deserializeData(_ recievedData: Data) {
        self.deserializer.decodeData(data: recievedData,
                                     dataType: DetailData.self, Completion: { (data) in
                                        self.updateView(data)
        })
    }

    internal func updateView(_ data: DetailData) {
        DispatchQueue.main.async {
            self.view.populateData(data: data)
        }
    }
}
